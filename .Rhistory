human <- select(human, one_of(keep))
# explore the structure and dimensions of the data
str(human)
dim(human)
glimpse(human)
# print out a completeness indicator of the 'human' data
complete.cases(human)
# print out the data along with a completeness indicator as the last column
data.frame(human[-1], comp = complete.cases(human))
# filter out all rows with NA values
human_ <- filter(human, complete.cases(human) == TRUE)
# define a new column representing the ratio of the mean completeness of education
human_ <- mutate(human_, meaneduratio = meanedu / edutime)
# define a new logical column 'teenbirth_high'
human_ <- mutate(human_, teenbirth_high = teenbirth > 33)
# remove the commas from gni
human_ <- within(human_, {
gni <- as.character(gni)
})
human_ <- within(human_, {
gni <- as.numeric(sub(",", "", gni, fixed = TRUE))
})
# add countries as rownames
rownames(human_) <- human_$cty
# remove the Country variable
human_ <- dplyr::select(human_, -cty)
# explore the structure and dimensions of the data
str(human_)
dim(human_)
glimpse(human_)
# Saving the analysis daatset, name it as human.txt, under the data folder
write.table(human_, file = "Data/human.txt")
summary(human_)
## Wenzhong Zhang
## Email: Wenzhong.Zhang@helsinki.fi
## 11th November 2017
## Data wrangling for final project
## The Human Developement (HD) and Gender Inequality Index (GII) data were joined by the country name, the incomplete data filtered out, and the ratio of education completeness added as a new column. Some unnecessary data (related to the hypothesis) was removed from the data.
# access the dplyr, tidyr, ggplot2 and stringr library
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
# read the dataset
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
# explore the structure and dimensions of the data
str(hd)
str(gii)
dim(hd)
dim(gii)
# change the column names into easier and readable format
colnames(hd) <- c("hdir", "cty", "hdi", "lifebirth", "edutime", "meanedu", "gni", "gnirhdir")
colnames(gii) <- c("giir", "cty", "gii", "mortalityM", "teenbirth", "ParF", "edu2F", "edu2M", "labF", "labM")
# check the change
summary(hd)
summary(gii)
# the two data sets are to be joined by "country" name
# common columns to use as identifiers
join_by <- c("cty")
# join the two datasets by the selected identifiers
human <- inner_join(hd, gii, by = join_by)
# explore the structure and dimensions of the data
str(human)
dim(human)
glimpse(human)
# columns to keep
keep <- c("cty", "hdi", "lifebirth", "edutime", "meanedu", "gni", "gnirhdir", "teenbirth", "edu2F", "edu2M", "labF", "labM")
# select the 'keep' columns
human <- select(human, one_of(keep))
# explore the structure and dimensions of the data
str(human)
dim(human)
glimpse(human)
# print out a completeness indicator of the 'human' data
complete.cases(human)
# print out the data along with a completeness indicator as the last column
data.frame(human[-1], comp = complete.cases(human))
# filter out all rows with NA values
human_ <- filter(human, complete.cases(human) == TRUE)
# define a new column representing the ratio of the mean completeness of education
human_ <- mutate(human_, meaneduratio = meanedu / edutime)
# define a new logical column 'teenbirth_high'
human_ <- mutate(human_, teenbirth_high = teenbirth > 33)
# remove the commas from gni
human_ <- within(human_, {
gni <- as.character(gni)
})
human_ <- within(human_, {
gni <- as.numeric(sub(",", "", gni, fixed = TRUE))
})
# create a vector to separate different degrees of human development according to definition
sep <- c(0.348, 0.55, 0.699, 0.799, 0.944)
# create a categorical variable 'crime'
hdi_d <- cut(human_$hdi, breaks = sep, include.lowest = TRUE, labels = c("low", "med", "high", "very_high"))
# add countries as rownames
rownames(human_) <- human_$cty
# remove the Country variable
human_ <- dplyr::select(human_, -cty)
# explore the structure and dimensions of the data
str(human_)
dim(human_)
glimpse(human_)
summary(human_)
# Saving the analysis daatset, name it as human.txt, under the data folder
write.table(human_, file = "Data/human.txt")
## Wenzhong Zhang
## Email: Wenzhong.Zhang@helsinki.fi
## 11th November 2017
## Data wrangling for final project
## The Human Developement (HD) and Gender Inequality Index (GII) data were joined by the country name, the incomplete data filtered out, and the ratio of education completeness added as a new column. Some unnecessary data (related to the hypothesis) was removed from the data.
# access the dplyr, tidyr, ggplot2 and stringr library
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
# read the dataset
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
# explore the structure and dimensions of the data
str(hd)
str(gii)
dim(hd)
dim(gii)
# change the column names into easier and readable format
colnames(hd) <- c("hdir", "cty", "hdi", "lifebirth", "edutime", "meanedu", "gni", "gnirhdir")
colnames(gii) <- c("giir", "cty", "gii", "mortalityM", "teenbirth", "ParF", "edu2F", "edu2M", "labF", "labM")
# check the change
summary(hd)
summary(gii)
# the two data sets are to be joined by "country" name
# common columns to use as identifiers
join_by <- c("cty")
# join the two datasets by the selected identifiers
human <- inner_join(hd, gii, by = join_by)
# explore the structure and dimensions of the data
str(human)
dim(human)
glimpse(human)
# columns to keep
keep <- c("cty", "hdi", "lifebirth", "edutime", "meanedu", "gni", "gnirhdir", "teenbirth", "edu2F", "edu2M", "labF", "labM")
# select the 'keep' columns
human <- select(human, one_of(keep))
# explore the structure and dimensions of the data
str(human)
dim(human)
glimpse(human)
# print out a completeness indicator of the 'human' data
complete.cases(human)
# print out the data along with a completeness indicator as the last column
data.frame(human[-1], comp = complete.cases(human))
# filter out all rows with NA values
human_ <- filter(human, complete.cases(human) == TRUE)
# define a new column representing the ratio of the mean completeness of education
human_ <- mutate(human_, meaneduratio = meanedu / edutime)
# define a new logical column 'teenbirth_high'
human_ <- mutate(human_, teenbirth_high = teenbirth > 33)
# remove the commas from gni
human_ <- within(human_, {
gni <- as.character(gni)
})
human_ <- within(human_, {
gni <- as.numeric(sub(",", "", gni, fixed = TRUE))
})
# create a vector to separate different degrees of human development according to definition
sep <- c(0.348, 0.55, 0.699, 0.799, 0.944)
# create a categorical variable 'crime'
hdi_d <- cut(human_$hdi, breaks = sep, include.lowest = TRUE, labels = c("low", "med", "high", "very_high"))
# add the new categorical value to scaled data
human_ <- data.frame(human_, hdi_d)
# add countries as rownames
rownames(human_) <- human_$cty
# remove the Country variable
human_ <- dplyr::select(human_, -cty)
# explore the structure and dimensions of the data
str(human_)
dim(human_)
glimpse(human_)
summary(human_)
# Saving the analysis daatset, name it as human.txt, under the data folder
write.table(human_, file = "Data/human.txt")
human <- read.table("Data/human.txt")
dim(human)
str(human)
summary(human)
```{r}
library(corrplot)
library(tidyverse)
library(dplyr)
library(tidyr)
library(GGally)
library(ggplot2)
p <- ggpairs(human, mapping = aes(col = hdi_d, alpha = 0.7), lower = list(combo = wrap("facethist", bins = 20)), title = "Figure 1. Graphical overview.")
library(ggplot2)
p <- ggpairs(human, mapping = aes(col = hdi_d, alpha = 0.7), lower = list(combo = wrap("facethist", bins = 20)), title = "Figure 1. Graphical overview.")
p
p <- ggpairs(human, mapping = aes(col = hdi_d, alpha = 0.7), lower = list(combo = wrap("facethist", bins = 20)), title = "Figure 1. Graphical overview.")
p + geom_bar()
p <- ggpairs(human, mapping = aes(col = hdi_d, alpha = 0.7), lower = list(combo = wrap("facethist", bins = 20)), title = "Figure 1. Graphical overview.", stat="count")
p
p <- ggpairs(human, mapping = aes(col = hdi_d, alpha = 0.7, stat="count"), lower = list(combo = wrap("facethist", bins = 20)), title = "Figure 1. Graphical overview.")
p
?ggpairs
p <- ggpairs(human, mapping = NULL, lower = list(combo = wrap("facethist", bins = 20)), title = "Figure 1. Graphical overview.")
p <- ggpairs(human, lower = list(combo = wrap("facethist", bins = 20)), title = "Figure 1. Graphical overview.")
p
pairs(human)
p <- ggpairs(human)
p
p <- ggpairs(human, stat="count")
p
p <- ggpairs(human$-hdi_d, mapping = aes(col = hdi_d, alpha = 0.7), lower = list(combo = wrap("facethist", bins = 20)), title = "Figure 1. Graphical overview.")
human2 <- select(human, -hdi_d)
p <- ggpairs(human2, mapping = aes(alpha = 0.7), lower = list(combo = wrap("facethist", bins = 20)), title = "Figure 1. Graphical overview.")
p
## Wenzhong Zhang
## Email: Wenzhong.Zhang@helsinki.fi
## 11th November 2017
## Data wrangling for final project
## The Human Developement (HD) and Gender Inequality Index (GII) data were joined by the country name, the incomplete data filtered out, and the ratio of education completeness added as a new column. The level of hdi was categorized into four degrees (low, medium, high and very high) according to the description. Some unnecessary data (related to the hypothesis) was removed from the data.
# access the dplyr, tidyr, ggplot2 and stringr library
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
# read the dataset
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
# explore the structure and dimensions of the data
str(hd)
str(gii)
dim(hd)
dim(gii)
# change the column names into easier and readable format
colnames(hd) <- c("hdir", "cty", "hdi", "lifebirth", "edutime", "meanedu", "gni", "gnirhdir")
colnames(gii) <- c("giir", "cty", "gii", "mortalityM", "teenbirth", "ParF", "edu2F", "edu2M", "labF", "labM")
# check the change
summary(hd)
summary(gii)
# the two data sets are to be joined by "country" name
# common columns to use as identifiers
join_by <- c("cty")
# join the two datasets by the selected identifiers
human <- inner_join(hd, gii, by = join_by)
# explore the structure and dimensions of the data
str(human)
dim(human)
glimpse(human)
# columns to keep
keep <- c("cty", "hdi", "lifebirth", "edutime", "meanedu", "gni", "gnirhdir", "teenbirth", "edu2F", "labF")
# select the 'keep' columns
human <- select(human, one_of(keep))
# explore the structure and dimensions of the data
str(human)
dim(human)
glimpse(human)
# print out a completeness indicator of the 'human' data
complete.cases(human)
# print out the data along with a completeness indicator as the last column
data.frame(human[-1], comp = complete.cases(human))
# filter out all rows with NA values
human_ <- filter(human, complete.cases(human) == TRUE)
# define a new column representing the ratio of the mean completeness of education
human_ <- mutate(human_, meaneduratio = meanedu / edutime)
# define a new logical column 'teenbirth_high'
human_ <- mutate(human_, teenbirth_high = teenbirth > 33)
# remove the commas from gni
human_ <- within(human_, {
gni <- as.character(gni)
})
human_ <- within(human_, {
gni <- as.numeric(sub(",", "", gni, fixed = TRUE))
})
# create a vector to separate different degrees of human development according to definition
sep <- c(0.348, 0.55, 0.699, 0.799, 0.944)
# create a categorical variable 'crime'
hdi_d <- cut(human_$hdi, breaks = sep, include.lowest = TRUE, labels = c("low", "med", "high", "very_high"))
# add the new categorical value to scaled data
human_ <- data.frame(human_, hdi_d)
# add countries as rownames
rownames(human_) <- human_$cty
# remove the Country variable
human_ <- dplyr::select(human_, -cty)
# explore the structure and dimensions of the data
str(human_)
dim(human_)
glimpse(human_)
summary(human_)
# Saving the analysis daatset, name it as human.txt, under the data folder
write.table(human_, file = "Data/human.txt")
human <- read.table("Data/human.txt")
dim(human)
str(human)
summary(human)
library(ggplot2)
human2 <- select(human, -hdi_d)
p <- ggpairs(human2, mapping = aes(alpha = 0.7), lower = list(combo = wrap("facethist", bins = 20)), title = "Figure 1. Graphical overview.")
p
p <- ggpairs(human2, mapping = aes(col = blue, alpha = 0.7), lower = list(combo = wrap("facethist", bins = 20)), title = "Figure 1. Graphical overview.")
p
human2 <- dplyr::select(human, -hdi_d)
p <- ggpairs(human2, mapping = aes(alpha = 0.7), lower = list(combo = wrap("facethist", bins = 20)), title = "Figure 1. Graphical overview.")
p
library(corrplot)
corrplot(human, method="color", order="hclust", type = "upper", cl.pos = "r", tl.pos = "d", tl.cex = 0.6, title = "Correlation plots for human", mar=c(0,0,1,0))
library(corrplot)
library(tidyverse)
library(dplyr)
library(tidyr)
library(GGally)
library(ggplot2)
corrplot(human, method="color", order="hclust", type = "upper", cl.pos = "r", tl.pos = "d", tl.cex = 0.6, title = "Correlation plots for human", mar=c(0,0,1,0))
library(corrplot)
cor(human2) %>% corrplot(method="color", order="hclust", type = "upper", cl.pos = "r", tl.pos = "d", tl.cex = 0.6, title = "Correlation plots for human", mar=c(0,0,1,0))
cor(human2) %>% corrplot(method="color", order="hclust", type = "upper", cl.pos = "r", tl.pos = "d", tl.cex = 0.8, title = "Figure 2. Correlation plots for human", mar=c(0,0,1,0))
regression <- lm(meaneduratio ~ hdi + gni + lifebirth, data = human)
summary(regression)
par(mfrow = c(2,2))
plot(regression, which = c(1, 2, 5))
m <- glm(teenbirth_high ~ hdi + gnirhdir + edu2F, data = human, family = "binomial")
summary(m)
OR <- coef(m) %>% exp
CI <- confint(m) %>% exp
cbind(OR, CI)
probabilities <- predict(m, type = "response")
alc <- mutate(human, probability = probabilities)
alc <- mutate(human, prediction = probability > 0.5)
library(dplyr)
library(tidyr)
probabilities <- predict(m, type = "response")
alc <- mutate(human, probability = probabilities)
alc <- mutate(human, prediction = probability > 0.5)
library(dplyr)
library(tidyr)
probabilities <- predict(m, type = "response")
human <- mutate(human, probability = probabilities)
human <- mutate(human, prediction = probability > 0.5)
table(teenbirth_high = human$teenbirth_high, prediction = human$prediction)
g <- ggplot(human, aes(x = probability, y = teenbirth_high, col = prediction))
g + geom_point() + ggtitle('Figure 4. Prediction and actual value distributions')
table(teenbirth_high = human$teenbirth_high, prediction = human$prediction) %>% prop.table() %>% addmargins()
loss_func <- function(class, prob) {
n_wrong <- abs(class - prob) > 0.5
mean(n_wrong)
}
loss_func(class = human$teenbirth_high, prob = human$probability)
library(boot)
cv <- cv.glm(data = human, cost = loss_func, glmfit = m, K = 10)
cv$delta[1]
m2 <- glm(teenbirth_high ~ hdi + meanedu + lifebirth + edutime, data = human, family = "binomial")
summary(m2)
OR <- coef(m2) %>% exp
CI <- confint(m2) %>% exp
cbind(OR, CI)
m2 <- glm(teenbirth_high ~ hdi + meanedu + lifebirth + edutime, data = human, family = "binomial")
probabilities2 <- predict(m2, type = "response")
human <- mutate(human, probability2 = probabilities2)
human <- mutate(human, prediction2 = probability2 > 0.5)
loss_func(class = human$teenbirth_high, prob = human$probability2)
cv2 <- cv.glm(data = human, cost = loss_func, glmfit = m2, K = 10)
cv2$delta[1]
m2 <- glm(teenbirth_high ~ hdi + meanedu + lifebirth + edutime, data = human, family = "binomial")
probabilities2 <- predict(m2, type = "response")
human <- mutate(human, probability2 = probabilities2)
human <- mutate(human, prediction2 = probability2 > 0.5)
loss_func(class = human$teenbirth_high, prob = human$probability2)
cv2 <- cv.glm(data = human, cost = loss_func, glmfit = m2, K = 10)
cv2$delta[1]
human
human
loss_func(class = human$teenbirth_high, prob = human$prediction2)
cv2 <- cv.glm(data = human, cost = loss_func, glmfit = m2, K = 10)
cv2$delta[1]
glimpse
table(teenbirth_high = human$teenbirth_high, prediction = human$prediction) %>% prop.table() %>% addmargins()
loss_func <- function(class, prob) {
n_wrong <- abs(class - prob) > 0.5
mean(n_wrong)
}
loss_func(class = human$teenbirth_high, prob = human$prediction)
library(boot)
cv <- cv.glm(data = human, cost = loss_func, glmfit = m, K = 10)
cv$delta[1]
m2 <- glm(teenbirth_high ~ hdi + meanedu + lifebirth + edutime, data = human, family = "binomial")
probabilities2 <- predict(m2, type = "response")
human <- mutate(human, probability2 = probabilities2)
human <- mutate(human, prediction2 = probability2 > 0.5)
loss_func(class = human$teenbirth_high, prob = human$prediction2)
cv2 <- cv.glm(data = human, cost = loss_func, glmfit = m2, K = 10)
cv2$delta[1]
human_scaled <- scale(human)
library(tidyverse)
human_scaled <- scale(human)
library(tidyverse)
library(dplyr)
library(tidyr)
library(tidyverse)
library(dplyr)
library(tidyr)
human_scaled <- scale(human)
library(tidyverse)
library(dplyr)
library(tidyr)
human_scaled <- scale(human2)
summary(human2_scaled)
library(tidyverse)
library(dplyr)
library(tidyr)
human2_scaled <- scale(human2)
summary(human2_scaled)
human2_scaled <- as.data.frame(human2_scaled)
human2 <- dplyr::select(human, -hdi_d)
human2 <- dplyr::select(human, -teenbirth_high)
human2_scaled <- scale(human2)
human2
library(tidyverse)
library(dplyr)
library(tidyr)
human <- read.table("Data/human.txt")
human2 <- dplyr::select(human, -hdi_d)
human2 <- dplyr::select(human, -teenbirth_high)
human2
human2_scaled <- scale(human2)
human <- read.table("Data/human.txt")
human2 <- dplyr::select(human, -hdi_d)
human2 <- dplyr::select(human2, -teenbirth_high)
human2
human2_scaled <- scale(human2)
summary(human2_scaled)
human2_scaled <- as.data.frame(human2_scaled)
summary(human2_scaled)
human2_scaled
human2_scaled <- data.frame(human2_scaled, human$hdi_d)
human2_scaled
human2_scaled <- dplyr::select(human2_scaled, -hdi)
glimpse(human2_scaled)
n <- nrow(human2_scaled)
ind <- sample(n,  size = n * 0.8)
train <- human2_scaled[ind,]
test <- human2_scaled[-ind,]
correct_classes <- test$human.hdi_d
test <- dplyr::select(test, -human.hdi_d)
lda.fit <- lda(human.hdi_d ~ ., data = train)
library(corrplot)
library(tidyverse)
library(dplyr)
library(tidyr)
library(GGally)
library(ggplot2)
lda.fit <- lda(human.hdi_d ~ ., data = train)
?lda
library(MASS)
lda.fit <- lda(human.hdi_d ~ ., data = train)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(train$human.hdi_d)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 3)
lda.pred <- predict(lda.fit, newdata = test)
table(correct = correct_classes, predicted = lda.pred$class) %>% addmargins
table(correct = correct_classes, predicted = lda.pred$class) %>% prop.table() %>% addmargins()
loss_func <- function(class, prob) {
n_wrong <- class != prob
mean(n_wrong)
}
loss_func(class = correct_classes, prob = lda.pred$class)
?plot
plot(lda.fit, dimen = 2, col = classes, pch = classes, main = "Figure 5. LDA categorizing of the data.")
lda.arrows(lda.fit, myscale = 3)
library(ggplot2)
set.seed(123)
k_max <- 10
twcss <- sapply(1:k_max, function(k){kmeans(human2_scaled, k)$tot.withinss})
dist_eu <- dist(human2_scaled)
summary(dist_eu)
dist_man <- dist(human2_scaled, method = "manhattan")
summary(dist_man)
human2_scaled
human2_scaled <- dplyr::select(human2_scaled, -human.hdi_d)
dist_eu <- dist(human2_scaled)
summary(dist_eu)
dist_man <- dist(human2_scaled, method = "manhattan")
summary(dist_man)
lda.arrows(lda.fit, myscale = 4)
plot(lda.fit, dimen = 2, col = classes, pch = classes, main = "Figure 5. LDA categorizing of the data.")
lda.arrows(lda.fit, myscale = 4)
plot(lda.fit, dimen = 2, col = classes, pch = classes, main = "Figure 5. LDA categorizing of the data.")
lda.arrows(lda.fit, myscale = 2)
plot(lda.fit, dimen = 2, col = classes, pch = classes, main = "Figure 5. LDA categorizing of the data.")
lda.arrows(lda.fit, myscale = 1)
lda.arrows(lda.fit, myscale = 3)
library(ggplot2)
set.seed(123)
k_max <- 10
twcss <- sapply(1:k_max, function(k){kmeans(human2_scaled, k)$tot.withinss})
qplot(x = 1:k_max, y = twcss, geom = 'line')
km <-kmeans(human2_scaled, centers = 2)
pairs(human2_scaled, col = km$cluster)
?qplot
?pairs
p <- ggpairs(human2_scaled, mapping = aes(col = km$cluster, alpha = 0.7), lower = list(combo = wrap("facethist", bins = 20)), title = "Figure 7. Clustering overview.")
p <- ggpairs(human2_scaled, mapping = aes(col = km, alpha = 0.7), lower = list(combo = wrap("facethist", bins = 20)), title = "Figure 7. Clustering overview.")
p
km <-kmeans(human2_scaled, centers = 2)
pairs(human2_scaled, col = km$cluster, main = "Figure 7. Visulization of the clustering results.")
